#include <common.h>

// Samplers
sampler depthSampler : register(s0);
sampler normalSampler : register(s1);
sampler diffuseSampler : register(s2);
sampler pointProjectionSampler : register(s3);
sampler spotProjectionSampler : register(s4);
sampler shadowSampler : register(s5);
sampler cubeShadowSampler : register(s6);

// Float constants
float4x4 invViewProj : register( c0 );
float4x4 spotViewProjMatrix : register( c4 );
float3 lightPos : register( c8 );
float3 lightColor : register( c9 );
float lightRange : register( c10 );
float lightIntensity : register(c11);
float3 cameraPos : register(c12);
float3 direction : register(c13);
float2 shadowMapScale : register(c14);

// Bool constants
bool usePointLighting : register( b0 );
bool useShadows : register( b1 );
bool useDirectionalLighting : register(b2);
bool softShadows : register(b3);

static const float3 sampleOffsetDirections[20] = {
   float3( 1,  1,  1), float3( 1, -1,  1), float3(-1, -1,  1), float3(-1,  1,  1), 
   float3( 1,  1, -1), float3( 1, -1, -1), float3(-1, -1, -1), float3(-1,  1, -1),
   float3( 1,  1,  0), float3( 1, -1,  0), float3(-1, -1,  0), float3(-1,  1,  0),
   float3( 1,  0,  1), float3(-1,  0,  1), float3( 1,  0, -1), float3(-1,  0, -1),
   float3( 0,  1,  1), float3( 0, -1,  1), float3( 0, -1, -1), float3( 0,  1, -1)
}; 

// returns antialised shadow term for point light
float GetShadow(in float3 lightVector) {
	const float bias = 0.05;
	float outShadow = 0.0f;
	float currentDistance = length( lightVector );
	if(softShadows) {
		float shadow = 0.0;	
		const int samples = 20;
		const float diskRadius = 0.015;
		for(int i = 0; i < samples; ++i) {
			
			float3 samplingVector = lightVector + sampleOffsetDirections[i] * diskRadius;
			if(currentDistance - bias > texCUBElod(cubeShadowSampler, float4(-samplingVector, 0)).r) {
				shadow += 1.0;
			}
		}
		outShadow = saturate(1.2f - shadow / float(samples));  
	} else {
		if(currentDistance - bias > texCUBElod(cubeShadowSampler, float4(-lightVector, 0)).r) {
			outShadow = 0.25f;
		}	
	}
	
	return outShadow;
}

float4 main( float2 texcoord : TEXCOORD0 ) : COLOR0 {
	// remap normal to [-1.0;+1.0]
	float3 n = normalize( tex2D( normalSampler, texcoord ).xyz * 2.0f - 1.0f );		
	float3 p = RestorePositionFromDepth(texcoord, invViewProj, depthSampler);
	
	// attenuation
	float3 lightVector = lightPos - p.xyz;
	float4 outputColor;	
	float3 diffuse = tex2D( diffuseSampler, texcoord ).xyz;

	if(useDirectionalLighting) {		
		outputColor = float4( lightColor.xyz * diffuse * max(0, dot(direction, n)), 1.0f);
	} else {		
		float attenuation = lightIntensity * GetAttenuation( lightVector, lightRange, n );		
		outputColor = float4( lightColor.xyz * diffuse * attenuation, 1.0f );			
	}
	
	if( usePointLighting ) { 
		// Point lighting		
		outputColor *= texCUBElod( pointProjectionSampler, float4( lightVector, 0 ) );
		if( useShadows ) {
			outputColor.rgb *= GetShadow(lightVector);
		}
	} else {
		 // Spot lighting			 
		float4 projection = GetProjection( p.xyz, spotViewProjMatrix );		
		if(!useDirectionalLighting) {
			outputColor *= tex2Dlod( spotProjectionSampler, projection );						
		} 	
		if( useShadows ) {
			const float bias = 0.002f;
			
			float shadow = 1.0f;
			if(softShadows) {
				for (float y = -1.5; y <= 1.5; y += 1.0) {
					for (float x = -1.5; x <= 1.5; x += 1.0) {
						float4 sampling = float4(projection.x + x * shadowMapScale.x, projection.y + y * shadowMapScale.y, 0, 0);						
						if( projection.z - bias > tex2Dlod( shadowSampler, sampling).r) {
							shadow += 1.0f;
						}
					}
				}			
				
				shadow = saturate(1.025f - shadow / 16.0f);  
			} else {
				if( projection.z - bias > tex2Dlod( shadowSampler, projection).r) {
					shadow = 0.25f;
				}
			}
			
			outputColor.rgb *= shadow;
		}		
	}

	return outputColor;
};